rawData <- read.celfiles(celFiles, phenoData = my.targets)
class(rawData)
my.targets@data$ShortName->rownames(pData(rawData))
colnames(rawData) <-rownames(pData(rawData))
head(pData(rawData))
head(rawData)
colnames(rawData)
head(exprs)
colnames(exprs)
my.targets@data$ShortName->rownames(pData(rawData))
colnames(rawData) <-rownames(pData(rawData))
head(pData(rawData))
head(rawData)
colnames(rawData)
head(exprs)
colnames(exprs)
```{r control de calidad}
library(arrayQualityMetrics)
arrayQualityMetrics(rawData)
arrayQualityMetrics(rawData)
library(arrayQualityMetrics)
arrayQualityMetrics(rawData)
```{r funcion plotCA3}
library(ggplot2)
library(ggrepel)
plotPCA3 <- function (datos, labels, factor, title, scale,colores, size = 1.5, glineas = 0.25) {
data <- prcomp(t(datos),scale=scale)
# plot adjustments
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# main plot
p1 <- ggplot(dataDf,aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = "Group")
# avoiding labels superposition
p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels),segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) +
ggtitle(paste("Principal Component Analysis for: ",title,sep=" "))+
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=colores)
}
plotraw <- plotPCA3(exprs(rawData), labels = targets$ShortName, factor = targets$Group,
title="Raw data", scale = FALSE, size = 3,
colores = c("red", "blue", "green", "yellow"))
plotraw <- plotPCA3(exprs(rawData), labels = targets$ShortName, factor = targets$Group, title="Raw data", scale = FALSE, size = 3,  colores = c("red", "blue", "green", "yellow"))
plotraw <- plotPCA3(exprs(rawData), labels = my.targets$ShortName, factor = my.targets$Group, title="Raw data", scale = FALSE, size = 3,  colores = c("red", "blue", "green", "yellow"))
plotraw
plotraw <- plotPCA3(exprs(rawData), labels = my.targets@data$ShortName, factor = my.targets@data$Group, title="Raw data", scale = FALSE, size = 3,  colores = c("red", "blue", "green", "yellow"))
plotraw
boxraw <- boxplot(rawData, cex.axis=0.5, las=2,  which="all",
col = c(rep("red", 3), rep("blue", 3), rep("green", 3), rep("yellow", 3)),
main="Distribution of raw intensity values")
boxraw
boxraw <- boxplot(rawData, cex.axis=0.5, las=2,  which="all",
col = c(rep("red", 3), rep("blue", 3), rep("green", 3), rep("yellow", 3)),
main="Distribution of raw intensity values")
plotPCA3 <- function (datos, labels, factor, title, scale,colores, size = 1.5, glineas = 0.25) {
data <- prcomp(t(datos),scale=scale)
# plot adjustments
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# main plot
p1 <- ggplot(dataDf,aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = "Group")
# avoiding labels superposition
#   p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels),segment.size = 0.25, size = size) +
#     labs(x = c(paste("PC1",loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) +
#     ggtitle(paste("Principal Component Analysis for: ",title,sep=" "))+
#     theme(plot.title = element_text(hjust = 0.5)) +
#     scale_color_manual(values=colores)
}
library(ggplot2)
library(ggrepel)
plotPCA3 <- function (datos, labels, factor, title, scale,colores, size = 1.5, glineas = 0.25) {
data <- prcomp(t(datos),scale=scale)
# plot adjustments
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# main plot
p1 <- ggplot(dataDf,aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = "Group")
# avoiding labels superposition
#   p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels),segment.size = 0.25, size = size) +
#     labs(x = c(paste("PC1",loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) +
#     ggtitle(paste("Principal Component Analysis for: ",title,sep=" "))+
#     theme(plot.title = element_text(hjust = 0.5)) +
#     scale_color_manual(values=colores)
}
plotraw <- plotPCA3(exprs(rawData), labels = my.targets@data$ShortName, factor = my.targets@data$Group, title="Raw data", scale = FALSE, size = 3,  colores = c("red", "blue", "green", "yellow"))
plotraw
plotraw <- plotPCA3(exprs(rawData), labels = myTargets, factor = myTargets$Group, title="Raw data", scale = FALSE, size = 3,  colores = c("red", "blue", "green", "yellow"))
eset_rma <- rma(rawData)
arrayQualityMetrics(eset_rma)
boxplot(eset_rma, cex.axis=0.5, las=2,  which="all",
+          col = c(rep("red", 3), rep("blue", 3), rep("green", 3), rep("yellow", 3)),
boxplot(eset_rma, cex.axis=0.5, las=2,  which="all",
col = c(rep("red", 3), rep("blue", 3), rep("green", 3), rep("yellow", 3)),
main="Boxplot for arrays intensity: Normalized Data")
library(pvca)
pData(eset_rma) <- targets
pData(eset_rma) <- my.targets
pData(eset_rma) <- myTargets
targets18 <-read.csv(file="./data/targets18.csv", row.names = 1, head=TRUE)
library(pvca)
pData(eset_rma) <- targets18
#select the threshold
pct_threshold <- 0.6
#select the factors to analyze
batch.factors <- c("Genotype", "Temperature")
#run the analysis
pvcaObj <- pvcaBatchAssess (eset_rma, batch.factors, pct_threshold)
#plot the results
bp <- barplot(pvcaObj$dat, xlab = "Effects",
ylab = "Weighted average proportion variance",
ylim= c(0,1.1),col = c("mediumorchid"), las=2,
main="PVCA estimation")
sds <- apply (exprs(eset_rma), 1, sd)
sdsO<- sort(sds)
plot(1:length(sdsO), sdsO, main="Distribution of variability for all genes",
sub="Vertical lines represent 90% and 95% percentiles",
xlab="Gene index (from least to most variable)", ylab="Standard deviation")
library(genefilter)
library(mogene21sttranscriptcluster.db)
# NOT NEEDED UNTIL ANALYSES ARE PERFORMED
# BiocManager::install("limma")
# BiocManager::install("genefilter")
BiocManager::install("mogene21sttranscriptcluster.db")
# NOT NEEDED UNTIL ANALYSES ARE PERFORMED
# BiocManager::install("limma")
BiocManager::install("genefilter")
# NOT NEEDED UNTIL ANALYSES ARE PERFORMED
BiocManager::install("limma")
library(genefilter)
library(mogene21sttranscriptcluster.db)
annotation(eset_rma) <- "mogene21sttranscriptcluster.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
print(filtered$filter.log)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, eval = TRUE, warning = FALSE, comment=NA)
```{r espacio de trabajo}
if (!dir.exists("data")) {dir.create("data")}
if (!dir.exists("results")) {dir.create("results")}
dir.create("data")
---
title: "PEC1 GSE46687"
author: "Dani Ibañez"
date: "9/4/2021"
output: html_document
---
```{r setup, include=FALSE, echo=FALSE, out.width = "300px", out.height="200px",fig.align='center'}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, eval = TRUE, warning = FALSE, comment=NA)
```{r setup, include=FALSE, echo=FALSE, out.width = "300px", out.height="200px",fig.align='center'}
### DESCRIPCIÓN DEL ESTUDIO: Síndrome de Turner
<br>
#### **descripción general**
El síndrome de Turner és una patología descubierta por el propio endocrinólogo Henry Turner que afecta solo a mujeres y que se detecta, principalmente, por unos pliegues en el cuello en niñas pequeñas o recién nacidas y en un crecimiento que se para prematuramente quedando con estaturas claramente inferiores a la media. Esterilidad, extremidades hinchadas, genitales y mamas subdesarrolladas, son algunas otras características clínicas.
Aunque se describió esta patología en 1938, fue en 1959 cuando un grupo de científicos descubrieron la principal característica para su detección rápida. Se trata de personas que solo tienen un cromosoma X completo, pudiendo tener parte del segundo o la mayoría con un solo cromosoma sexual X. Es por ello que se identifican como personas con 45 cromosomas (45X). Si el cromosoma X único o entero viene del padre hablaremos de genotipo 45xp, y si procede de la madre hablaremos de genotipo 45Xm.
Parece demostrado que no es hereditario, pero a su vez se considera que la mayoría de incidencia es causada por el espermatozoide del padre, por lo que se considera que son patologías generadas o en el proceso de meiosis de los padres o en las primeras fases de duplicidad embrionaria. Esta segunda opción podría explicar por qué algunas mujeres presentan células con los dos cromosomas XX y otras células sin uno de ellos.
No hay un tratamiento específico definido si bien, el principal problema que es la baja estatura responde a tratamientos de estimulación de hormona del crecimiento.
<br>
#### **descripción del estudio**
Al margen de los problemas de nacimiento, parece que existe predisposición de padecer enfermedades más graves como problemas cardiovasculares, diabetes o enfermedades de caracter autoinmune. Con este objetivo se realizan estudios de expresión génica comparando muestras de pacientes con esta patología.
En concreto, los científicos 	Cheng CM, Zhou J, Bondy C y otros, realizaron un análisis basado en 36 muestras distribuidas como sigue:
- 10 muestras de 10 mujeres con ambos cromosomas XX ("normales" 46,XX) que nos sirven de referencia.
- 16 muestras de 16 mujeres con un solo cromosoma X de procedencia materna 45,Xm
- 10 muestras de 10 mujeres con un solo cromosoma X de procedencia paterna 45,Xp
El experimento está realizado sobre microarray de affymetrix U133 versión 2.0 (GPL570) y se ha registrado en GEO con el repositorio GSE46687
Como ampliación de la información, el probe set U133 2.0 contiene un catálogo ampliado respecto la primera versión de U133. En este caso hablamos de 47.000 tránscritos distintos que se corresponden con 38.500 genes.
#### **Enlace de datos y artículo**
Los enlaces importantes para el estudio son:
https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=gse46687
https://www.affymetrix.com/support/technical/datasheets/human_datasheet.pdf
__________________________________________________________________________________________________
<br>
### PREPARACIÓN DE ENTORNO DE TRABAJO Y LECTURA DE DATOS
<br>
### Creación del espacio de trabajo
```{r espacio de trabajo}
setwd("C:/MASTER/OMICAS/ENTREGA PEC1")
if (!dir.exists("data")) {dir.create("data")}
if (!dir.exists("results")) {dir.create("results")}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, eval = TRUE, warning = FALSE, comment=NA)
selectSamples<- function (myID){
set.seed(myID)
selected <- c(sample(1:10, 6),11, sample(12:26, 5), sample(27:36,6)) # se intuye que la muestra 11 tiene alguna característica relevante
selected <- sort(selected)
}
samples_idp = selectSamples(1083627)
samples_idp
samples_idp = selectSamples(1083627)
samples_idp
A partir de aquí establecemos nuestro set de muestras personalizado con las 18 filas obtenidas:
```{r subset 18 muestras targets}
targetsAll <-read.csv(file="./data/targetsAll.csv", row.names = 1, head=TRUE)
row.names(targetsAll)
targets18 <- targetsAll[samples_idp,]
length(targets18)
row.names(targets18)
knitr::kable(targets18, booktabs = TRUE, caption = 'Subset de muestras seleccionadas para la PEC1 para IDP:1083627')
```{r carga de paquetes}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if(!(require(knitr))) install.packages("knitr")
if(!(require(colorspace))) install.packages("colorspace")
if(!(require(gplots))) install.packages("gplots")
if(!(require(ggplot2))) install.packages("ggplot2")
if(!(require(ggrepel))) install.packages("ggrepel")
if(!(require(htmlTable))) install.packages("htmlTable")
if(!(require(prettydoc))) install.packages("prettydoc")
if(!(require(devtools))) install.packages("devtools")
if(!(require(BiocManager))) install.packages("BiocManager")
library(oligo)
celFiles <- list.celfiles("./data", full.names = FALSE)
head(celFiles)
celFiles <- list.celfiles("./data", full.names = TRUE)
head(celFiles)
library(oligo)
celFiles <- list.celfiles("./data", full.names = FALSE)
head(celFiles)
celFiles
celFiles <- substr(celFiles,1,10)
celFiles
celFiles <- list.celfiles("./data", full.names = FALSE)
celFiles
library(Biobase)
my.targets <-read.AnnotatedDataFrame(file.path("./data","targets18.csv"), header = TRUE, row.names = 1, sep=";")
my.targets <-read.AnnotatedDataFrame(file.path("./data","targets18.csv"), header = TRUE, row.names = 1, sep=";")
row.names(my.targets)
my.targets
rawData <- read.celfiles(celFiles, phenoData = my.targets)
celFiles <- list.celfiles("./data", full.names = TRUE)
celFiles
library(Biobase)
my.targets <-read.AnnotatedDataFrame(file.path("./data","targets18.csv"), header = TRUE, row.names = 1, sep=";")
my.targets <-read.AnnotatedDataFrame(file.path("./data","targets18.csv"), header = TRUE, row.names = 1, sep=";")
my.targets
row.names(my.targets)
rawData <- read.celfiles(celFiles, phenoData = my.targets)
class(rawData)
rawData
row.names(my.targets)
head(my.targets@data)
my.targets@data
my.targets@data$ShortName
rownames(pData(rawData))
rawData <- read.celfiles(celFiles, phenoData = my.targets)
rownames(pData(rawData))
colnames(rawData)
colnames(exprs)
colnames(exprs(rawData))
head(exprs(rawData))
tail(exprs(rawData),20)
head(rawData)
rawData
pData(rawData)
knitr::kable(pData(rawData), booktabs = TRUE, caption = 'Subset de muestras seleccionadas para la PEC1 para IDP:1083627')
knitr::opts_chunk$set(echo = TRUE, message = FALSE, eval = TRUE, warning = FALSE, comment=NA)
colnames(my.targets)
library(oligo)
library(oligo)
celFiles <- list.celfiles("./data", full.names = TRUE)
celFiles
library(Biobase)
my.targets <-read.AnnotatedDataFrame(file.path("./data","targets18.csv"), header = TRUE, row.names = 1, sep=";")
my.targets
row.names(my.targets)
colnames(my.targets)
rownames(pData(rawData))
rawData <- read.celfiles(celFiles, phenoData = my.targets)
class(rawData)
rownames(pData(rawData))
colnames(rawData)
knitr::kable(pData(rawData), booktabs = TRUE, caption = 'Subset de muestras seleccionadas para la PEC1 para IDP:1083627')
pData(rawData)
my.targets@data$title->rownames(pData(rawData))
colnames(rawData) <-rownames(pData(rawData))
head(pData(rawData))
rawData
colnames(rawData)
head(exprs(rawData))
tail(exprs(rawData),20)
colnames(exprs(rawData))
colnames(exprs(rawData))
library(ggplot2)
library(ggrepel)
plotPCA3 <- function (datos, labels, factor, title, scale,colores, size = 1.5, glineas = 0.25) {
data <- prcomp(t(datos),scale=scale)
# plot adjustments
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# main plot
p1 <- ggplot(dataDf,aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = "Group")
# avoiding labels superposition
p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels),segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) +
ggtitle(paste("Principal Component Analysis for: ",title,sep=" "))+
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=colores)
}
plotPCA3(exprs(rawData), labels = my.targets$title, factor = my.targets$karyotype,
title="Raw data", scale = FALSE, size = 3,
colores = c("red", "blue", "green"))
plotPCA3(exprs(rawData), labels = my.targets@data$title, factor = my.target@datas$karyotype,
title="Raw data", scale = FALSE, size = 3,
colores = c("red", "blue", "green"))
plotPCA3(exprs(rawData), labels = my.targets@data$title, factor = my.targets@datas$karyotype,
title="Raw data", scale = FALSE, size = 3,
colores = c("red", "blue", "green"))
row.names(targets18)
colnames(targets18)
targetsAll <-read.csv(file="./data/targetsAll.csv", row.names = 1, head=TRUE)
row.names(targetsAll)
targets18 <- targetsAll[samples_idp,]
length(targets18)
row.names(targets18)
colnames(targets18)
samples_idp = selectSamples(1083627)
selectSamples<- function (myID){
set.seed(myID)
selected <- c(sample(1:10, 6),11, sample(12:26, 5), sample(27:36,6)) # se intuye que la muestra 11 tiene alguna característica relevante
selected <- sort(selected)
}
samples_idp = selectSamples(1083627)
samples_idp
samples_idp = selectSamples(1083627)
samples_idp
A partir de aquí establecemos nuestro set de muestras personalizado con las 18 filas obtenidas:
```{r subset 18 muestras targets}
targetsAll <-read.csv(file="./data/targetsAll.csv", row.names = 1, head=TRUE)
row.names(targetsAll)
targets18 <- targetsAll[samples_idp,]
length(targets18)
row.names(targets18)
colnames(targets18)
colnames(targets18)[1]<-"Grupo"
colnames(targets18)
colnames(targets18)[1]<-"sample_id"
colnames(targets18)
knitr::kable(targets18, booktabs = TRUE, caption = 'Subset de muestras seleccionadas para la PEC1 para IDP:1083627')
library(oligo)
celFiles <- list.celfiles("./data", full.names = TRUE)
celFiles
library(Biobase)
my.targets <-read.AnnotatedDataFrame(file.path("./data","targets18.csv"), header = TRUE, row.names = 1, sep=";")
my.targets
row.names(my.targets)
colnames(my.targets)
rawData <- read.celfiles(celFiles, phenoData = my.targets)
class(rawData)
rownames(pData(rawData))
colnames(rawData)
knitr::kable(pData(rawData), booktabs = TRUE, caption = 'Subset de muestras seleccionadas para la PEC1 para IDP:1083627')
pData(rawData)
my.targets@data$sample_id->rownames(pData(rawData))
colnames(rawData) <-rownames(pData(rawData))
head(pData(rawData))
rawData
colnames(rawData)
head(exprs(rawData))
tail(exprs(rawData),20)
colnames(exprs(rawData))
colnames(exprs(rawData))
```{r control de calidad}
library(ggplot2)
library(ggrepel)
plotPCA3 <- function (datos, labels, factor, title, scale,colores, size = 1.5, glineas = 0.25) {
data <- prcomp(t(datos),scale=scale)
# plot adjustments
dataDf <- data.frame(data$x)
Group <- factor
loads <- round(data$sdev^2/sum(data$sdev^2)*100,1)
# main plot
p1 <- ggplot(dataDf,aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = Group), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data$x[,1])-5,max(data$x[,1])+5)) +
scale_fill_discrete(name = "Group")
# avoiding labels superposition
p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels),segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")),y=c(paste("PC2",loads[2],"%"))) +
ggtitle(paste("Principal Component Analysis for: ",title,sep=" "))+
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=colores)
}
plotPCA3(exprs(rawData), labels = targets18$sample_id, factor = targets18$karyotype,
title="Raw data", scale = FALSE, size = 3,
colores = c("red", "blue", "green"))
boxraw <- boxplot(rawData, cex.axis=0.5, las=2,  which="all",
col = c(rep("red", 3), rep("blue", 3), rep("green", 3), rep("yellow", 3)),
main="Distribution of raw intensity values")
boxraw <- boxplot(rawData, cex.axis=0.5, las=2,  which="all",
col = c(rep("red", 3), rep("blue", 3), rep("green", 3)),
main="Distribution of raw intensity values")
boxraw
boxraw <- boxplot(rawData, cex.axis=0.5, las=2,  which="all",
col = c(rep("red", 3), rep("blue", 3), rep("green", 3)),
main="Distribution of raw intensity values")
library(arrayQualityMetrics)
library(arrayQualityMetrics)
arrayQualityMetrics(rawData)
arrayQualityMetrics(rawData, force=TRUE)
eset_rma <- rma(rawData)
eset_rma <- rma(rawData)
arrayQualityMetrics(eset_rma)
eset_rma <- rma(rawData)
arrayQualityMetrics(eset_rma, force=TRUE)
plotPCA3(exprs(eset_rma), labels = targets18$sample_id, factor = targets18$karyotype,
title="Normalized data", scale = FALSE, size = 4,
colores = c("red", "blue", "green"))
boxplot(eset_rma, cex.axis=0.5, las=2,  which="all",
col = c(rep("red", 3), rep("blue", 3), rep("green", 3)),
main="Boxplot for arrays intensity: Normalized Data")
library(pvca)
pData(eset_rma) <- targets18
#select the threshold
pct_threshold <- 0.6
#select the factors to analyze
batch.factors <- c("karyotype")
#run the analysis
pvcaObj <- pvcaBatchAssess (eset_rma, batch.factors, pct_threshold)
?pvcaBatchAssess
#select the factors to analyze
batch.factors <- c("sample_id","karyotype")
#run the analysis
pvcaObj <- pvcaBatchAssess (eset_rma, batch.factors, pct_threshold)
```{r detecting genes}
sds <- apply (exprs(eset_rma), 1, sd)
sdsO<- sort(sds)
plot(1:length(sdsO), sdsO, main="Distribution of variability for all genes",
sub="Vertical lines represent 90% and 95% percentiles",
xlab="Gene index (from least to most variable)", ylab="Standard deviation")
abline(v=length(sds)*c(0.9,0.95))
abline(v=length(sds)*c(0.9,0.95))
plot(1:length(sdsO), sdsO, main="Distribution of variability for all genes",
sub="Vertical lines represent 90% and 95% percentiles",
xlab="Gene index (from least to most variable)", ylab="Standard deviation")
abline(v=length(sds)*c(0.9,0.95))
?abline
```{r filtering least variable genes}
library(genefilter)
library(mogene21sttranscriptcluster.db)
annotation(eset_rma) <- "mogene21sttranscriptcluster.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
print(filtered$filter.log)
eset_filtered <-filtered$eset
plot(1:length(sdsO), sdsO, main="Distribution of variability for all genes",
sub="Vertical lines represent 90% and 95% percentiles",
xlab="Gene index (from least to most variable)", ylab="Standard deviation")
abline(v=length(sds)*c(0.9,0.95))
sds <- apply (exprs(eset_rma), 1, sd)
sds <- apply (exprs(eset_rma), 1, sd)
sdsO<- sort(sds)
sdsO<- sort(sds)
plot(1:length(sdsO), sdsO, main="Distribution of variability for all genes",
sub="Vertical lines represent 90% and 95% percentiles",
xlab="Gene index (from least to most variable)", ylab="Standard deviation")
abline(v=length(sds)*c(0.9,0.95))
library(genefilter)
library(mogene21sttranscriptcluster.db)
annotation(eset_rma) <- "mogene21sttranscriptcluster.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
?boxplot
?boxplot
library(hgu133plus2.db)
head(hgu133plus2.db,10)
head("hgu133plus2.db",10)
library("hgu133plus2.db")
head("hgu133plus2.db",10)
head(hgu133plus2.db,10)
head(hgu133plus2,10)
class(hgu133plus2.db)
citation("hgu133plus2.db")
?heatmap.2
?cat
